class <%= @rails.controller.class_name %> < <%= @rails.controller.base_controller %>

<% @rails.nested_in_resources.each do |resource| -%>
  def <%= resource.name %>
    <%= resource.instance_name %> ||= <%= resource.class_name_with_modules %>.find(params[:<%= resource.param_name %>])
  end
  helper_method :<%= resource.name %>

<% end %>

  def index
    <%= "@#{@rails.resource.collection_name}_search = #{@rails.resource.search_class_name}.new(search_#{@rails.resource.collection_name}_params)" %>
    <%=
      active_record = ["@#{@rails.resource.collection_name}_search"]
      active_record << [ "results" ]
      active_record << [ "includes(#{@rails.controller.index_includes.lazy.map(&:strip).map{|v| v.gsub(',', '')}.to_a.join(', ')})" ] if @rails.controller.index_includes and !@rails.controller.index_includes.empty?
      active_record << [ "joins(#{@rails.controller.index_joins.join(', ')})" ] if @rails.controller.index_joins and !@rails.controller.index_joins.empty?
      active_record << [ "page(params[:page])", "per(params[:per])" ]
      active_record << [ "all" ]
      "@#{@rails.resource.collection_name} = #{active_record.join('.')}"
    %>
  end

  def show
    @<%= @rails.resource.name %> = <%= @rails.resource.class_name_with_modules %>.find(params[:id])
  end

  def new
    @<%= @rails.resource.name %> = <%= @rails.resource.class_name_with_modules %>.new
  end

  def edit
    @<%= @rails.resource.name %> = <%= @rails.resource.class_name_with_modules %>.find(params[:id])
  end

  def create
    @<%= @rails.resource.name %> = <%= @rails.resource.class_name_with_modules %>.new(<%= @rails.resource.collection_name %>_params)

    respond_to do |format|
      if @<%= @rails.resource.name %>.save
        <%= "message = t('create', scope: [:scaffold, :notices, :success], model: #{@rails.resource.class_name}.model_name.human.mb_chars.downcase)" %>
        format.html { redirect_to <%= @rails.path.collection %>, notice: message }
      else
        format.html { render :new }
      end
    end
  end

  def update
    @<%= @rails.resource.name %> = <%= @rails.resource.class_name_with_modules %>.find(params[:id])
    respond_to do |format|
      if @<%= @rails.resource.name %>.update(<%= @rails.resource.collection_name %>_params)
        <%= "message = t('update', scope: [:scaffold, :notices, :success], model: #{@rails.resource.class_name}.model_name.human.mb_chars.downcase)" %>
        format.html { redirect_to <%= @rails.path.collection %>, notice: message }
      else
        format.html { render :edit }
      end
    end
  end

  def destroy
    @<%= @rails.resource.name %> = <%= @rails.resource.class_name_with_modules %>.find(params[:id])
    @<%= @rails.resource.name %>.destroy
    respond_to do |format|
      <%= "message = t('destroy', scope: [:scaffold, :notices, :success], model: #{@rails.resource.class_name}.model_name.human.mb_chars.downcase)" %>
      format.html { redirect_to <%= @rails.path.collection %>, notice: message }
    end
  end

  private
  def <%= @rails.resource.collection_name %>_params
    params[:<%= @rails.resource.name %>].permit(<%= @rails.controller.permitted_fields.keys.map{|field| ":#{field}"}.join(', ') %>)
  end

  def search_<%= @rails.resource.collection_name %>_params
    return {} if params[:<%= @rails.resource.collection_name %>_search].blank?
    params[:<%= @rails.resource.collection_name %>_search].permit(<%= @rails.controller.permitted_search_fields.collect{|field| ":#{field}"}.join(', ') %>)
  end

end
